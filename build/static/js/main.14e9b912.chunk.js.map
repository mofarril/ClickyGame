{"version":3,"sources":["components/Wrapper.js","components/Jumbotron.js","components/Tails.js","components/Navbar1.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Jumbotron","Tails","id","onClick","hanClick","value","alt","name","src","image","Navbar","href","message","currentScore","highScore","Footer","App","state","tailClickCount","guessed","highscore","tails","dogWag","tailzArr","dogs","countz","length","rand","Math","floor","random","holder","setState","youLost","handleClick","console","log","guessedArr","includes","push","this","map","dog","key","Component","Boolean","window","location","hostname","match","require","publish","err","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAQeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCQ1BC,MAVf,WACE,OAEI,yBAAKF,UAAU,aACb,2CACA,yG,MCaOG,MAlBf,SAAgBJ,GACd,OACE,yBAAKC,UAAU,YAAYI,GAAG,SAC5B,yBAAKJ,UAAU,OACjB,yBAAKA,UAAU,OAAOK,QAAS,kBAAIN,EAAMO,SAASP,EAAMK,MACtD,yBAAKJ,UAAU,iBACZD,EAAMQ,MACP,yBAAKC,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,a,MCc1BC,MArBf,SAAiBb,GACf,OAEE,yBAAKC,UAAU,yDACf,yBAAKA,UAAU,aACjB,uBAAGA,UAAU,eAAea,KAAK,KAAjC,eAEA,0BAAMb,UAAU,oBACbD,EAAMe,SAEP,0BAAMd,UAAU,qBAAhB,UACUD,EAAMgB,aADhB,iBAC4ChB,EAAMiB,c,MCFvCC,MATf,WACE,OAEA,yBAAKjB,UAAU,eAAf,wB,QCgGakB,E,2MA5FbC,MAAQ,CACNC,eAAgB,EAChBC,QAAS,GACTC,UAAW,EACXC,MAAO,GACPT,QAAS,0B,EAMXU,OAAS,WAGP,IAFA,IAAIC,EAAWC,EACXC,EAASD,EAAKE,OAAS,EACpBD,EAAS,GAAG,CACjB,IAAME,EAAOC,KAAKC,MAAMD,KAAKE,UAAY,EAAIL,IACvCM,EAASR,EAASE,GACxBF,EAASE,GAAUF,EAASI,GAC5BJ,EAASI,GAAQI,EACjBN,IAEF,EAAKO,SAAS,CAAEX,MAAOE,K,EAEzBU,QAAU,WACR,EAAKD,SAAS,CACZpB,QAAS,2BACTM,eAAgB,EAChBC,QAAS,KAEX,EAAKG,U,EAMPY,YAAc,SAAAhC,GACZiC,QAAQC,IAAI,WACZ,IAAMC,EAAa,EAAKpB,MAAME,QAC1BkB,EAAWC,SAASpC,GACtB,EAAK+B,WAGPI,EAAWE,KAAKrC,GAChB,EAAKoB,SACD,EAAKL,MAAMC,eAAiB,EAAI,EAAKD,MAAMG,WAC7C,EAAKY,SAAS,CAAEZ,UAAW,EAAKH,MAAMC,eAAiB,IAEzD,EAAKc,SAAS,CACZpB,QAAS,yBACTM,eAAgB,EAAKD,MAAMC,eAAiB,EAC5CC,QAASkB,IAGXF,QAAQC,IAAI,EAAKnB,MAAMC,kB,mFA7CvBsB,KAAKlB,SACLa,QAAQC,IAAI,Y,+BA+CJ,IAAD,OACP,OAEE,kBAAC,EAAD,KAEE,kBAAC,EAAD,CAEExB,QAAS4B,KAAKvB,MAAML,QACpBE,UAAW0B,KAAKvB,MAAMG,UACtBP,aAAc2B,KAAKvB,MAAMC,iBAG3B,kBAAC,EAAD,MACA,yBAAKpB,UAAU,YAAYI,GAAG,kBAC5B,yBAAKJ,UAAU,OAClB,yBAAKA,UAAU,gBAEL0C,KAAKvB,MAAMI,MAAMoB,KAAI,SAAAC,GAAG,OACvB,kBAAC,EAAD,CACExC,GAAIwC,EAAIxC,GACRyC,IAAKD,EAAIxC,GACTK,KAAMmC,EAAInC,KACVE,MAAOiC,EAAIjC,MACXL,SAAU,EAAK8B,oBAO3B,kBAAC,EAAD,W,GAvFUU,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTUC,EAAS,IACjBC,QAAQ,QAAQ,SAAUC,OAKlCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.14e9b912.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Wrapper.css\";\r\n\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"../styles/Jumbotron.css\";\r\n\r\nfunction Jumbotron() {\r\n  return (\r\n   \r\n      <div className=\"jumbotron\">\r\n        <h1>Clicky Game</h1>\r\n        <p>Click on an image to earn points, but don't click on any more than once!</p>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default Jumbotron; ","import React from \"react\";\nimport \"../styles/Tails.css\";\n\nfunction Tails (props) {\n  return (\n    <div className=\"container\" id=\"tails\"> \n      <div className=\"row\">\n    <div className=\"card\" onClick={()=>props.hanClick(props.id)}>\n      <div className=\"img-container\" >\n        {props.value}\n        <img alt={props.name} src={props.image} />\n       </div>\n     </div>\n    </div>\n    </div>    \n\n    \n  );\n  \n}\n\nexport default Tails;","import React from \"react\";\nimport \"../styles/Navbar1.css\";\n\nfunction Navbar (props) {\n  return (\n    \n    <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n    <div className=\"container\">\n  <a className=\"navbar-brand\" href=\"/\">Clicky Game</a>\n \n  <span className=\"navbar-text mr-2\">\n    {props.message}\n    </span>\n    <span className=\"navbar-text score\">\n      Score: {props.currentScore} | Top Score: {props.highScore}\n    </span>\n  </div>\n</nav>\n\n  );\n\n}\n\n\nexport default Navbar;","import React from \"react\";\nimport \"../styles/Footer.css\";\n\nfunction Footer() {\n  return (\n   \n  <div className=\"card-header\">\n    Thanks for Playing!\n  </div>\n  );\n}\n\nexport default Footer; ","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Tails from \"./components/Tails\";\nimport Navbar from \"./components/Navbar1\";\nimport Footer from \"./components/Footer\"\nimport dogs from \"./dogs.json\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  state = {\n    tailClickCount: 0,\n    guessed: [],\n    highscore: 0,\n    tails: [],\n    message: \"Click an Image to Play\"\n  };\n  componentDidMount() {\n    this.dogWag()\n    console.log(\"loaded\")\n  }\n  dogWag = () => {\n    let tailzArr = dogs\n    let countz = dogs.length - 1\n    while (countz > 0) {\n      const rand = Math.floor(Math.random() * (1 + countz))\n      const holder = tailzArr[countz]\n      tailzArr[countz] = tailzArr[rand]\n      tailzArr[rand] = holder\n      countz--\n    }\n    this.setState({ tails: tailzArr })\n  }\n  youLost = () => {\n    this.setState({\n      message: \"You guessed incorrectly!\",\n      tailClickCount: 0,\n      guessed: []\n    })\n    this.dogWag()\n    //reset score\n    //rerender dogs\n    //clear guessed\n\n  }\n  handleClick = id => {\n    console.log(\"clicked\")\n    const guessedArr = this.state.guessed\n    if (guessedArr.includes(id)) {\n      this.youLost()\n      return\n    }\n    guessedArr.push(id)\n    this.dogWag()\n    if (this.state.tailClickCount + 1 > this.state.highscore) {\n      this.setState({ highscore: this.state.tailClickCount + 1 })\n    }\n    this.setState({\n      message: \"You guessed correctly!\",\n      tailClickCount: this.state.tailClickCount + 1,\n      guessed: guessedArr\n    });\n\n    console.log(this.state.tailClickCount);\n  }\n\n  render() {\n    return (\n\n      <Wrapper>\n\n        <Navbar\n\n          message={this.state.message}\n          highScore={this.state.highscore}\n          currentScore={this.state.tailClickCount}\n        />\n\n        <Jumbotron />\n        <div className=\"container\" id=\"card-container\">\n          <div className=\"row\">          \n       <div className=\"card-columns\">\n\n                {this.state.tails.map(dog => (\n                  <Tails\n                    id={dog.id}\n                    key={dog.id}\n                    name={dog.name}\n                    image={dog.image}\n                    hanClick={this.handleClick}\n\n                  />))}\n              </div>\n            </div>\n          </div>\n        \n        <Footer></Footer>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\n//import $ from 'jquery';\n//import Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconst ghpages = require ('gh-pages');\nghpages.publish('dist', function (err){});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}